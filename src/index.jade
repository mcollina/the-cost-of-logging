doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title The Cost of Logging

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section(data-bespoke-backdrop='pines').transwhite
        div(style='text-align: left; margin-top: -2em;')
          h1 The Cost of Logging
          h3 by&nbsp;
            a(href="http://twitter.com/matteocollina") @matteocollina
          h3(style='margin-left:.15em;margin-top: -1em') &&nbsp;&nbsp;
            a(style="display:inline-block;margin-left: -.03em",href="http://twitter.com/davidmarkclem") @davidmarkclem
          br
          a(href="http://nearform.com" style="width: 50%; float: right; margin-bottom: -30em;")
            img(src="./images/nearform.svg")

      section(data-bespoke-backdrop='london').trans
        h2(style='margin-left: 50%; text-align: right; width: 30%') Our story begins in London

      section(data-bespoke-backdrop='nap-mp').trans
        h2(style='color: #eee; padding-left: 40%; padding-bottom: 50%') NET-A-PORTER <br> & <br> MR-PORTER
        a(style="color: black; display: block; white-space: nowrap; line-height: 0.5em; padding: 0.5em; padding-bottom: 0.7em; background: rgba(255,255,255,0.8) !important; border-radius: 3px" href="http://www.nearform.com/nodecrunch/client-case-study-net-a-porter/") http://www.nearform.com/nodecrunch/client-case-study-net-a-porter

      section
        h2 Original Results
        br
        img(src="./images/barchart.png" style="height: 70%")

      section
        h1 Observation
        h2 Disabling logging
        h2 increased throughput

      section
        img(src="./images/bugfix.svg" style="width: 90%")

      section
        h2 The more you log the better
        img(src="./images/shifu.png" style="margin-bottom: -1%")

      section
        h2
          | Perceived time spent
          br
          | logging a line
        h1 0 ms

      section
        h2
          | Actual time spent
          br
          | logging a line
        h1 0.22 ms
        // node is single threaded!

      section
        h2(style='margin-bottom: 1.25em;margin-top: -.5em;position:relative;') One Log Per Request

        img(src="images/0.22ms-2kreq-1log.png", style='height:90%;margin-left:12%;margin-top: -7.5%;margin-bottom:-5%')

      section
        h2(style='margin-bottom: 1.25em;margin-top: -.5em;position:relative;') Ten Logs Per Request

        img(src="images/0.22ms-2kreq-10logs.png", style='height:90%;margin-left:5%;margin-top: -5%;margin-bottom:-5%')

      section
        img(src="./images/kaboom.gif")

      section(data-bespoke-backdrop='snail').trans
        h1(style="color: white; margin-left: -10%; margin-right: auto; width: 10%; text-align: left; padding-bottom: 5%") Why so slow?

      section(data-bespoke-backdrop='adapters').trans
        h2(style='margin-left:-30%') Adapters
        h2 of adapters
        h2(style='margin-left:25%') of adapters
        h2(style='margin-left:50%; font-size: 1em') of adapters
        h2(style='margin-left:75%; font-size: 0.5em') of adapters
        h2(style='margin-left:90%; font-size: 0.2em') of adapters

      section(data-bespoke-backdrop='lamp').trans
        h1(style="color: white; margin-left: -10%; margin-right: auto; width: 10%; text-align: left; padding-bottom: 5%")
          | Idea

      section(data-bespoke-backdrop='lamp').trans
        h2(style="color: white; margin-left: auto; margin-right: 0%; width: 30%; text-align: right; padding-bottom: 5%")
          | Let's write a <u><i>fast</i></u> logger!

      section
        img(src="./images/pino.png" style="width: 90%")

      section
        h1 We
        h1(style='color: red;font-size: 7em;margin-bottom: .25em') ♥
        h1 JSON <span style='color: red'>\n</span>

      section
        pre
          code.language-javascript.
            const split = require('split2')
            process.stdin.pipe(split(JSON.parse))
              .on('data', (obj) => {
                console.log(Object.keys(obj))
              })
        br
        img(src="./images/split2.png")

      section
        h1 Pino
        h2 Bunyan API

      section
        pre
          code.language-javascript.
            const pino = require('pino')()
            pino.info('hello world')
            pino.debug({
              big: 'object'
            }, 'with message')

      section
        h1 Pino
        h2 10000 ops — 250ms

      section
        h2(style='margin-bottom: 1.25em;margin-top: -.5em;position:relative;') One Log Per Request

        img(src="images/0.025ms-2kreq-1log.png", style='height:90%;margin-left:10%;margin-top: -7.5%;margin-bottom:-5%')

      section
        h2(style='margin-bottom: 1.25em;margin-top: -.5em;position:relative;') Ten Logs Per Request

        img(src="images/0.025ms-2kreq-10logs.png", style='height:90%;margin-left:10%;margin-top: -7.5%;margin-bottom:-5%')

      section
        h2 2016
        img(src="./images/bench-basic.svg" style="height: 95%")

      section
        h2 2017
        img(src="./images/histogram-updated.png" style="height: 95%")

      section(data-bespoke-backdrop='extreme' style="color: white").trans
        div(style="text-align: right")
          h1 Extreme Mode
          h2 We can go faster

      section
        h1 Extreme Mode
        h2 10000 logs in 100ms
        h2 2x throughput increase

      section
        h2(style='margin-bottom: 1.25em;margin-top: -.5em;position:relative;') Ten Logs Per Request

        img(src="images/0.01ms-2kreq-10logs.png", style='height:90%;margin-left:10%;margin-top: -7.5%;margin-bottom:-5%')

      section
        h1 Extreme Mode
        h2 Trade-off: 4k batching

      section
        pre
          code.language-javascript.
            const pino = require('pino')({
              extreme: true
            })
            pino.info('hello world')
            pino.debug({
              big: 'object'
            }, 'with message')

      section(data-bespoke-backdrop='integration').trans
        // big thing to just do a shadow
        h1(style="color: white; text-shadow: -2px 0 1px black, 0 2px 1px black, 2px 0 1px black, 0 -2px 1px black;")
          | Server Integration

      section
        h1(style='position:absolute;top:0;width:100%;text-align:center;left:0;font-size: 3.5em') Express
        code.language-bash(style='margin-top: 2.5em;margin-bottom: -.25em') &nbsp;$ npm install express-pino-logger&nbsp;
        pre
          code(style='position:relative; top:-1em').language-javascript.
            var app = require('express')()
            var pino = require('express-pino-logger')()

            app.use(pino)

            app.get('/', function (req, res) {
              req.log.info('something else')
              res.send('hello world')
            })

            app.listen(3000)

      section
        h1 Hapi
        code.language-bash &nbsp;$ npm install hapi-pino&nbsp;
        pre
          code.language-javascript.
            const Hapi = require('hapi')
            const server = new Hapi.Server()
            server.connection({
              host: 'localhost',
              port: 3000
            })

      section
        h1 Hapi
        code.language-bash &nbsp;$ npm install hapi-pino&nbsp;
        pre
          code.language-javascript.
            server.register({
              register: require('hapi-pino').register
            }, (err) => {
              if (err) { return console.error(err) }
              server.logger().info('log from server instance')
              server.start()
            })

      section
        h1 Hapi
        code.language-bash &nbsp;$ npm install hapi-pino&nbsp;
        pre
          code.language-javascript.
            server.route({
              method: 'GET',
              path: '/',
              handler: function (request, reply) {
                request.log(['a', 'b'], 'Request into hello world')
                request.logger.info('In handler %s', request.path)
                return reply('hello world')
              }
            })


      section
        h1(style='position:absolute;top:0;width:100%;text-align:center;left:0;font-size: 3.5em') Restify
        code.language-bash(style='margin-top: 2.5em;margin-bottom: -.25em')  &nbsp;$ npm install restify-pino-logger&nbsp;
        pre
          code(style='position:relative; top:-1em').language-javascript.
            var restify = require('restify')
            var server = restify.createServer({name: 'app'})

            server.use(require('restify-pino-logger')())

            server.get('/', function (req, res) {
              req.log.info('something else')
              res.send('hello world')
            })

            server.listen(3000)

      section
        h1(style='position:absolute;top:0;width:100%;text-align:center;left:0;font-size: 3.5em') Koa
        code.language-bash(style='margin-top: 2.5em;margin-bottom: -.25em')   &nbsp;$ npm install koa-pino-logger&nbsp;
        pre
          code(style='position:relative; top:-1em').language-javascript.
            var Koa = require('koa')
            var logger = require('koa-pino-logger')
            var app = new Koa()
            app.use(logger())
            app.use(async (ctx) => {
              ctx.log.info('something else')
              ctx.body = 'hello world'
            })
            app.listen(3000)

      section
        h1(style='position:absolute;top:0;width:100%;text-align:center;left:0;font-size: 3.5em') http
        code.language-bash(style='margin-top: 2.5em;margin-bottom: -.25em') &nbsp;$ npm install pino-http&nbsp;
        pre
          code(style='position:relative; top:-1em').language-javascript.
            var http = require('http')
            var server = http.createServer(handle)
            var logger = require('pino-http')()
            function handle (req, res) {
              logger(req, res)
              req.log.info('something else')
              res.end('hello world')
            }
            server.listen(3000)


      section(data-bespoke-backdrop='dragon-scroll').trans
        h1(style="color: white; padding-top: 50%") Secret Sauce(s)

      section
        h1 Secret Sauce
        h2 Avoid JSON.stringify

      section
        h1 Secret Sauce
        h2
          | Date.now()
          br
          | vs
          br
          | new Date().toISOString()

      section
        h1 Secret Sauce
        h2(style='margin-bottom: .5em') %FlattenString
        code.language-bash &nbsp;$ npm install flatstr&nbsp;

      section
        pre
          code.language-javascript.
            module.exports = function flatstr (s) {
              Number(s)
              return s
            }

      section
        h1 Secret Sauce
        h2(style='margin-bottom: .5em') fast-safe-stringify
        code.language-bash &nbsp;$ npm install fast-safe-stringify&nbsp;

      section
        pre
          code.language-javascript.
            function Circle (val, k, parent) {
              this.val = val
              this.k = k
              this.parent = parent
            }
            Circle.prototype.toJSON = function toJSON () {
              this.parent[this.k] = this.val
              return '[Circular]'
            }

      section
        h1 Secret Sauce
        h2(style='margin-bottom: .5em') quick-format
        code.language-bash &nbsp;$ npm install quick-format&nbsp;

      section(data-bespoke-backdrop='tools').trans
        h1(style="color: white;margin-top: -40%") Tools <br>of the Trade

      section(data-bespoke-backdrop='fire').trans
        h2(style="color: white; text-shadow: -2px 0 1px black, 0 2px 1px black, 2px 0 1px black, 0 -2px 1px black;")
          | Flamegraphs
          // a flamegraph visualizes functions in such a way that
          // it shows you which ones are taking up the most time

      section
        h1(style='margin-top:-.5em') 0x
        p(style='padding:0;margin:0;margin-top: -1em;margin-bottom:.5em')
          code.language-bash &nbsp;$ npm install 0x&nbsp;
        img(src='images/0x-demo.gif', style='height:85%')

      section
        img(src='images/pr.png', style='height:90%')
        br
        a(href="https://github.com/mcollina/pino/pull/2") https://github.com/mcollina/pino/pull/2

      section
        h2 Before
        img(src='images/fg-pino-before.png' style="width: 95%")

      section
        h2 After
        img(src='images/fg-pino-after.png' style="width: 95%")

      section
        img(src='images/autocannon.png', style='width:100%;margin-bottom:5%;margin-top:-5%')
        h3 HTTP load tester
        h3 Trival cross platform installation
        h3 Generates 10% more load than alternatives in C

      section
        h2(style='font-size: 3.125em') 0x + autocannon = 👌

      section(data-bespoke-backdrop='wv').trans
        h2(style="margin-top: -20%") Pino is more than module

      section(data-bespoke-backdrop='wv').trans
        h2(style="margin-top: -20%") Pino is a way of life
        // because it is not only a tool, it encourages you
        // down a path that leads to performant programming
        // and avoid the pitfalls of the adapter problem

      section
        h1 Pino Philosophy
        h2 Absolute minimum overhead

      section
        h1 Pino Philosophy
        h2 Rotate your logs yourself!

      section
        h1 Pino Philosophy
        h2 Want better readability? Post-process
        h3 With <code>pino</code> CLI

      section
        h2 pino-colada
        h3
          a(href="https://github.com/lrlna/pino-colada") https://github.com/lrlna/pino-colada
        img(src="images/colada.png" style="width: 90%")

      section
        h1 Pino Philosophy
        h2 Transports are separate processes

      section
        h2 Demo: ElasticSearch Integration
        p
          a(href="https://github.com/mcollina/pino-elasticsearch" style="white-space: nowrap;")
            | https://github.com/mcollina/pino-elasticsearch

      section
        img(src="images/pino-eco.png" style="width: 90%")

      section(data-bespoke-backdrop='ecosystem-impact').trans
        h2(style="margin-top: -20%; color: white; text-shadow: 0px 0px 4px black") Ecosystem Impact

      section
        h2 Node 8.2 and Turbofan

      section
        h2 2016
        img(src="./images/bench-basic.svg" style="height: 95%")

      section
        h2 2017
        img(src="./images/histogram-updated.png" style="height: 95%")

      section
        h2 Turbofan
        img(src="./images/histogram-turbofan.png" style="height: 95%")

      section
        h2 This presentation
        ul.bullet
          li
            a(href="https://mcollina.github.io/the-cost-of-logging").
              https://mcollina.github.io/the-cost-of-logging
          li
            a(href="https://github.com/mcollina/the-cost-of-logging").
              https://github.com/mcollina/the-cost-of-logging

      section(data-bespoke-backdrop='ncb').trans
        h1(style='color:white;text-shadow: 2px 2px 10px #666;') Node Cookbook
        h2(style='color:white;text-shadow: 2px 2px 10px #666;') Third Edition

      section
        img(src='images/matteo.png' style="width: 95%")
        h3
          a(href='http://github.com/mcollina') http://github.com/mcollina

      section
        img(src='images/dave.png' style="width: 95%")
        h3
          a(href='http://github.com/davidmarkclements') http://github.com/davidmarkclements

      section
        h1 Thanks!
        a(href="http://nearform.com" style="width: 20%")
          img(src="./images/nearform.svg")
        h3 We are hiring JavaScript developers
        br
        h3 <a href="mailto:matteo.collina@nearform.com">matteo.collina@nearform.com</a>
        h3 <a href="mailto:david.clements@nearform.com">david.clements@nearform.com</a>
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a> <a href="http://twitter.com/davidmarkclem">@davidmarkclem</a>
        h3 <a href="http://www.nearform.com">www.nearform.com</a>

    script(src='build/build.js')
